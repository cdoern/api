//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSNameResolver) DeepCopyInto(out *DNSNameResolver) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSNameResolver.
func (in *DNSNameResolver) DeepCopy() *DNSNameResolver {
	if in == nil {
		return nil
	}
	out := new(DNSNameResolver)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSNameResolver) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSNameResolverList) DeepCopyInto(out *DNSNameResolverList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DNSNameResolver, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSNameResolverList.
func (in *DNSNameResolverList) DeepCopy() *DNSNameResolverList {
	if in == nil {
		return nil
	}
	out := new(DNSNameResolverList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSNameResolverList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSNameResolverSpec) DeepCopyInto(out *DNSNameResolverSpec) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSNameResolverSpec.
func (in *DNSNameResolverSpec) DeepCopy() *DNSNameResolverSpec {
	if in == nil {
		return nil
	}
	out := new(DNSNameResolverSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSNameResolverStatus) DeepCopyInto(out *DNSNameResolverStatus) {
	*out = *in
	if in.ResolvedNames != nil {
		in, out := &in.ResolvedNames, &out.ResolvedNames
		*out = make([]DNSNameResolverStatusItem, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSNameResolverStatus.
func (in *DNSNameResolverStatus) DeepCopy() *DNSNameResolverStatus {
	if in == nil {
		return nil
	}
	out := new(DNSNameResolverStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSNameResolverStatusItem) DeepCopyInto(out *DNSNameResolverStatusItem) {
	*out = *in
	if in.IPs != nil {
		in, out := &in.IPs, &out.IPs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.LastLookupTime != nil {
		in, out := &in.LastLookupTime, &out.LastLookupTime
		*out = (*in).DeepCopy()
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSNameResolverStatusItem.
func (in *DNSNameResolverStatusItem) DeepCopy() *DNSNameResolverStatusItem {
	if in == nil {
		return nil
	}
	out := new(DNSNameResolverStatusItem)
	in.DeepCopyInto(out)
	return out
}
